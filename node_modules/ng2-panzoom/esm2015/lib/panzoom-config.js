/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
export class PanZoomConfig {
    /**
     * @param {?=} options
     */
    constructor(options = null) {
        this.zoomLevels = 5;
        this.neutralZoomLevel = 2;
        this.scalePerZoomLevel = 2.0;
        this.initialZoomLevel = this.neutralZoomLevel;
        this.friction = 10.0;
        this.haltSpeed = 100.0;
        this.initialPanX = 0;
        this.initialPanY = 0;
        this.initialZoomToFit = null;
        this.keepInBounds = false;
        this.keepInBoundsDragPullback = 0.7;
        this.keepInBoundsRestoreForce = 0.5;
        this.panOnClickDrag = true;
        this.dragMouseButton = 'left'; // left, middle, right
        // left, middle, right
        this.zoomButtonIncrement = 1.0;
        this.zoomOnDoubleClick = true;
        this.zoomOnMouseWheel = true;
        this.invertMouseWheel = false;
        this.zoomStepDuration = 0.2;
        this.zoomToFitZoomLevelFactor = 0.95;
        this.freeMouseWheel = true;
        this.freeMouseWheelFactor = 0.08;
        this.noDragFromElementClass = null;
        this.modelChanged = new BehaviorSubject({
            isPanning: null,
            zoomLevel: null,
            pan: {
                x: null,
                y: null
            }
        });
        this.api = new BehaviorSubject({
            model: null,
            config: null,
            changeZoomLevel: null,
            zoomIn: null,
            zoomOut: null,
            zoomToFit: null,
            getViewPosition: null,
            getModelPosition: null,
            resetView: null,
            panToPoint: null,
            panDelta: null,
            panDeltaPercent: null,
            panDeltaAbsolute: null
        });
        if (!options) {
            return;
        }
        if ('zoomLevels' in options) {
            this.zoomLevels = options.zoomLevels;
        }
        if ('neutralZoomLevel' in options) {
            this.neutralZoomLevel = options.neutralZoomLevel;
        }
        if ('scalePerZoomLevel' in options) {
            this.scalePerZoomLevel = options.scalePerZoomLevel;
        }
        if ('initialZoomLevel' in options) {
            this.initialZoomLevel = options.initialZoomLevel;
        }
        if ('friction' in options) {
            this.friction = options.friction;
        }
        if ('haltSpeed' in options) {
            this.haltSpeed = options.haltSpeed;
        }
        if ('initialPanX' in options) {
            this.initialPanX = options.initialPanX;
        }
        if ('initialPanY' in options) {
            this.initialPanY = options.initialPanY;
        }
        if ('initialZoomToFit' in options) {
            this.initialZoomToFit = options.initialZoomToFit;
        }
        if ('keepInBounds' in options) {
            this.keepInBounds = options.keepInBounds;
        }
        if ('keepInBoundsDragPullback' in options) {
            this.keepInBoundsDragPullback = options.keepInBoundsDragPullback;
        }
        if ('keepInBoundsRestoreForce' in options) {
            this.keepInBoundsRestoreForce = options.keepInBoundsRestoreForce;
        }
        if ('panOnClickDrag' in options) {
            this.panOnClickDrag = options.panOnClickDrag;
        }
        if ('dragMouseButton' in options) {
            this.dragMouseButton = options.dragMouseButton;
        }
        if ('zoomButtonIncrement' in options) {
            this.zoomButtonIncrement = options.zoomButtonIncrement;
        }
        if ('zoomOnDoubleClick' in options) {
            this.zoomOnDoubleClick = options.zoomOnDoubleClick;
        }
        if ('zoomOnMouseWheel' in options) {
            this.zoomOnMouseWheel = options.zoomOnMouseWheel;
        }
        if ('invertMouseWheel' in options) {
            this.invertMouseWheel = options.invertMouseWheel;
        }
        if ('zoomStepDuration' in options) {
            this.zoomStepDuration = options.zoomStepDuration;
        }
        if ('zoomToFitZoomLevelFactor' in options) {
            this.zoomToFitZoomLevelFactor = options.zoomToFitZoomLevelFactor;
        }
        if ('freeMouseWheel' in options) {
            this.freeMouseWheel = options.freeMouseWheel;
        }
        if ('freeMouseWheelFactor' in options) {
            this.freeMouseWheelFactor = options.freeMouseWheelFactor;
        }
        if (this.keepInBounds && this.neutralZoomLevel !== 0) {
            console.warn('You have set keepInBounds to true and neutralZoomLevel to ' + this.neutralZoomLevel + '. Be aware that the zoom level cannot go below ' + this.neutralZoomLevel);
        }
        if ('noDragFromElementClass' in options) {
            this.noDragFromElementClass = options.noDragFromElementClass;
        }
    }
}
if (false) {
    /** @type {?} */
    PanZoomConfig.prototype.zoomLevels;
    /** @type {?} */
    PanZoomConfig.prototype.neutralZoomLevel;
    /** @type {?} */
    PanZoomConfig.prototype.scalePerZoomLevel;
    /** @type {?} */
    PanZoomConfig.prototype.initialZoomLevel;
    /** @type {?} */
    PanZoomConfig.prototype.friction;
    /** @type {?} */
    PanZoomConfig.prototype.haltSpeed;
    /** @type {?} */
    PanZoomConfig.prototype.initialPanX;
    /** @type {?} */
    PanZoomConfig.prototype.initialPanY;
    /** @type {?} */
    PanZoomConfig.prototype.initialZoomToFit;
    /** @type {?} */
    PanZoomConfig.prototype.keepInBounds;
    /** @type {?} */
    PanZoomConfig.prototype.keepInBoundsDragPullback;
    /** @type {?} */
    PanZoomConfig.prototype.keepInBoundsRestoreForce;
    /** @type {?} */
    PanZoomConfig.prototype.panOnClickDrag;
    /** @type {?} */
    PanZoomConfig.prototype.dragMouseButton;
    /** @type {?} */
    PanZoomConfig.prototype.zoomButtonIncrement;
    /** @type {?} */
    PanZoomConfig.prototype.zoomOnDoubleClick;
    /** @type {?} */
    PanZoomConfig.prototype.zoomOnMouseWheel;
    /** @type {?} */
    PanZoomConfig.prototype.invertMouseWheel;
    /** @type {?} */
    PanZoomConfig.prototype.zoomStepDuration;
    /** @type {?} */
    PanZoomConfig.prototype.zoomToFitZoomLevelFactor;
    /** @type {?} */
    PanZoomConfig.prototype.freeMouseWheel;
    /** @type {?} */
    PanZoomConfig.prototype.freeMouseWheelFactor;
    /** @type {?} */
    PanZoomConfig.prototype.noDragFromElementClass;
    /** @type {?} */
    PanZoomConfig.prototype.modelChanged;
    /** @type {?} */
    PanZoomConfig.prototype.api;
}
//# sourceMappingURL=data:application/json;base64,